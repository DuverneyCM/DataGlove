library ieee;
use ieee.std_logic_1164.all;

entity spi_fsm_controller is

	port(
		clk		: in	std_logic;
		input	 	: in	std_logic;
		
		R_nW				: out  std_logic;
		MB					: out  std_logic;
		Address			: out  std_logic_vector(5 downto 0);
		Data				: out  std_logic_vector(7 downto 0);
		
		reset	 	: in	std_logic;
		output	: out	std_logic_vector(1 downto 0)
	);

end entity;

architecture rtl of spi_fsm_controller is

	-- Build an enumerated type for the state machine
	type state_type is (s0, s1, s2, s3);

	-- Register to hold the current state
	signal state   : state_type;

begin

	-- Logic to advance to the next state
	process (clk, reset)
	begin
		if reset = '1' then
			state <= s0;
			cnt	<=	0;
		elsif (rising_edge(clk)) then
			case state is
				when s0=>
					if start = '1' then
						state <= s1;
					else
						state <= s0;
					end if;
				when s1=>
					if SPI_END = '1' then
						state <= s2;
						if	cnt < Setup_step	then
							cnt	<=	cnt + 1;
							setup <= '1';
						else
							setup	<=	'0';
						end if;
					else
						state <= s1;
					end if;
				when s2=>
					if input = '1' then
						state <= s3;
					else
						state <= s2;
					end if;
				when s3 =>
					if input = '1' then
						state <= s0;
					else
						state <= s3;
					end if;
			end case;
		end if;
	end process;

	-- Output depends solely on the current state
	process (state)
	begin
		case state is
			when s0 =>
				output <= "00";
			when s1 =>
				output <= "01";
			when s2 =>
				output <= "10";
			when s3 =>
				output <= "11";
		end case;
	end process;
	
	process (cnt)
	begin
		case cnt is
			--config, setup = 1
			when 0 =>
				R_nW	<=	'0';		MB	<=	'0';	Address	<=	"000000";	Data	<=	"00000000";
			when 1 =>
				R_nW	<=	'0';		MB	<=	'0';	Address	<=	"000000";	Data	<=	"00000000";
			when 2 =>
				R_nW	<=	'0';		MB	<=	'0';	Address	<=	"000000";	Data	<=	"00000000";
			when 3 =>
				R_nW	<=	'0';		MB	<=	'0';	Address	<=	"000000";	Data	<=	"00000000";
			when 4 =>
				R_nW	<=	'0';		MB	<=	'0';	Address	<=	"000000";	Data	<=	"00000000";
			when 5 =>
				R_nW	<=	'0';		MB	<=	'0';	Address	<=	"000000";	Data	<=	"00000000";
			when 6 =>
				R_nW	<=	'0';		MB	<=	'0';	Address	<=	"000000";	Data	<=	"00000000";
			when 7 =>
				R_nW	<=	'0';		MB	<=	'0';	Address	<=	"000000";	Data	<=	"00000000";
			when 8 =>
				R_nW	<=	'0';		MB	<=	'0';	Address	<=	"000000";	Data	<=	"00000000";
			when 9 =>
				R_nW	<=	'0';		MB	<=	'0';	Address	<=	"000000";	Data	<=	"00000000";
			others	=>
				R_nW	<=	'0';		MB	<=	'0';	Address	<=	"000000";	Data	<=	"00000000";	--datos de usuario
		end case;
				
	end process;

end rtl;
